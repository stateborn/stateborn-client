/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../common";
import type { Proposal, ProposalInterface } from "../../contracts/Proposal";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_proposalMerkleRootHex",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_sequencerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nativeCollateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tokenCollateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_challengePeriodSeconds",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "_payloads",
        type: "bytes[]",
      },
      {
        internalType: "address",
        name: "_daoPoolAddress",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "againstVotesCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "challengePeriodSeconds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimReward",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "contractCreationTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "daoAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "daoPool",
    outputs: [
      {
        internalType: "contract IDaoPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "executeProposal",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "executed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "forVotesCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPayloads",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isEnded",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isPassed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nativeCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalMerkleRootHex",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sequencerAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "voteSide",
        type: "bool",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "voteSide",
        type: "bool",
      },
    ],
    name: "voteWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "votes",
    outputs: [
      {
        internalType: "uint256",
        name: "nativeForVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nativeAgainstVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenForVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAgainstVotes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101806040526200165280380390816200001981620005ba565b91823960e09182828281010312620004df578151602083015191906001600160a01b0383168303620004df5760408401516060850151608086015160a087015191969294926001600160401b038311620004df57838101601f848301011215620004df5780830151926001600160401b038411620005a457620000a260208560051b01620005ba565b9360208582815201809680850160208460051b868801010111620004df57602084860101915b60208460051b86880101018310620004e457505050505060c001519460018060a01b038616809603620004df5760049460ff1986541686556080528660a052885261010096875260c05251680100000000000000008111620004ca5760009182548284558083106200044f575b508280526020832083915b838310620003145750505050610160934285526101409384526101209233845287513410620002d05787518015620002bd57340662000279578751908115620002665750604090340492839260018060a01b03168152600360205220556001556040519361101b958662000637873960805186610693015260a05186610caf015260c05186818161010c0152818161021601528181610460015281816106d00152818161089f01528181610a2c0152610f8a015251858181610552015281816108e60152610d580152518481816102bc0152610736015251838181610a9c0152610d120152518281816102760152610c480152518181816101c90152818161023701528181610481015281816106f1015281816108c001528181610a4d0152610fab0152f35b634e487b7160e01b845260129052602483fd5b60649060206040519162461bcd60e51b8352820152601460248201527f436f6c6c61746572616c20696e636f72726563740000000000000000000000006044820152fd5b634e487b7160e01b845260128252602484fd5b60649060206040519162461bcd60e51b8352820152601460248201527f436f6c6c61746572616c20746f6f20736d616c6c0000000000000000000000006044820152fd5b80518051906001600160401b0382116200043c57620003348454620005e0565b601f8111620003fc575b50602090601f83116001146200038e5792826001949360209386958b9262000382575b5050600019600383901b1c191690841b1785555b0192019201919062000140565b01519050388062000361565b848852602088209190601f198416895b818110620003e3575092600195928592879660209610620003c9575b505050831b8301855562000375565b015160001960f88460031b161c19169055388080620003ba565b929360206001819287860151815501950193016200039e565b6200042a9085895260208920601f850160051c8101916020861062000431575b601f0160051c01906200061d565b386200033e565b90915081906200041c565b634e487b7160e01b875260418852602487fd5b838052826020852091820191015b8181106200046c575062000135565b80856200047c60019354620005e0565b806200048c575b5050016200045d565b601f81118414620004a3575081555b853862000483565b828252620004c0601f60208420920160051c82018583016200061d565b818355556200049b565b604183634e487b7160e01b6000525260246000fd5b600080fd5b82516001600160401b038111620004df57828701603f82888a0101011215620004df578686018101602001516001600160401b0381116200058f5762000534601f8201601f1916602001620005ba565b91818352848901604083838b8d0101010111620004df5760005b888a848310620005745750506000602093850184015250509082529283019201620000c8565b8284602094936040930101010151828287010152016200054e565b60246000634e487b7160e01b81526041600452fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620005a457604052565b90600182811c9216801562000612575b6020831014620005fc57565b634e487b7160e01b600052602260045260246000fd5b91607f1691620005f0565b81811062000629575050565b600081556001016200061d56fe608060408181526004918236101561001657600080fd5b600092833560e01c9182630f11b67914610d41575081632131c68c14610cfd578163279dbe0714610cde5781632cee6a6b14610c9a57816331a38c8914610c7757816333e0ff5d14610c33578163373058b814610a1657816338d7497d146109f05781634b9f5c981461087c5781636545645b14610759578163814823281461071e578163a4fd6f56146106b6578163ada9e4441461067b578163b88a802f1461044b578163ce583e92146101ec578163cea3e530146101b1578163d8bff5a51461015157508063efc8514c146101335763fb601294146100f657600080fd5b3461012f578160031936011261012f57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b503461012f578160031936011261012f576020906002549051908152f35b9050346101ad5760203660031901126101ad57356001600160a01b038116908190036101ad5782829160809452600360205220908154916001810154916003600283015492015492815194855260208501528301526060820152f35b8280fd5b50503461012f578160031936011261012f57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83833461012f57602092836003193601126101ad5780358015159081810361039c5761026361025b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610d7b565b421115610d9e565b83516370a0823160e01b815233848201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691908781602481865afa801561044157879061040e575b6102e191507f000000000000000000000000000000000000000000000000000000000000000090610e07565b80156103ce57600387983389525285872090600282019182541593846103c1575b156103a0575061031c828261032194549155600154610e48565b610d7b565b6001555b61032d578480f35b803b1561039c57604485928551968793849263bd041c4d60e01b8452338885015260248401525af1801561039257610367575b8084938480f35b6001600160401b03831161037f575052818080610360565b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b8480fd5b6103b99250600361031c91018281549155600254610e48565b600255610325565b6003820154159450610302565b855162461bcd60e51b8152808601899052601a602482015279151bdad95b8818dbdb1b185d195c985b081d1bdbc81cdb585b1b60321b6044820152606490fd5b508781813d831161043a575b6104248183610e11565b81010312610436576102e190516102b5565b8680fd5b503d61041a565b86513d89823e3d90fd5b9050826003193601126101ad576104ac6104a57f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610d7b565b4211610e55565b3383526003602052818320908251608081018181106001600160401b038211176106685784528254815260018301549160208201928352600360028501549486840195865201549360608301948552610503610f85565b94851561065357508251905161051891610d7b565b905b811561061d575085939261059b6105a8936105966105a1948760001461061157610590600154935b891561060857600254905b6105787f00000000000000000000000000000000000000000000000000000000000000008093610ea1565b97610583878a610de7565b9b15610600575051610ea1565b94610ea1565b610e07565b90610d7b565b9182610d7b565b47146105f9575b81808092338252600360205281600387822082815582600182015582600282015501558181156105f0575b3390f1156105e6575080f35b51903d90823e3d90fd5b506108fc6105da565b50476105af565b905051610ea1565b6001549061054d565b61059060025493610542565b606490602087519162461bcd60e51b8352820152601060248201526f526577617264206e6f74206170706c7960801b6044820152fd5b61066291508451905190610d7b565b9061051a565b634e487b7160e01b865260418352602486fd5b50503461012f578160031936011261012f57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461012f578160031936011261012f576020906107157f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610d7b565b42119051908152f35b50503461012f578160031936011261012f57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b905082346108795780600319360112610879578054916001600160401b03831161086657509190815192602092610795848460051b0186610e11565b828552838501928383805285842084915b83831061083e575050505080519484869586019181875251809252828601928260051b8701019493805b8382106107dd5787870388f35b9193959092949650603f19888203018652838751805190818452845b82811061082a57505081838286838095600198010152601f80199101160101980196019201879695949293916107d0565b8181018401518582018501528793016107f9565b6001888192610852859c999a9b989c610eb4565b8152019201920191909793969594976107a6565b634e487b7160e01b825260419052602490fd5b80fd5b91905060203660031901126101ad5781359182151583036109ec576108e461025b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610d7b565b7f0000000000000000000000000000000000000000000000000000000000000000908134106109b2576109178234610de7565b61097857506109269034610e07565b338452600360205290832091156109565781610946826109509454610d7b565b9055600154610d7b565b60015580f35b60016109729201610968828254610d7b565b9055600254610d7b565b60025580f35b606490602084519162461bcd60e51b8352820152601460248201527310dbdb1b185d195c985b081a5b98dbdc9c9958dd60621b6044820152fd5b606490602084519162461bcd60e51b8352820152601460248201527310dbdb1b185d195c985b081d1bdbc81cdb585b1b60621b6044820152fd5b8380fd5b50503461012f578160031936011261012f57602090610a0d610f85565b90519015158152f35b919050826003193601126101ad57610a716104a57f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610d7b565b81549160ff8316610bf557610a84610f85565b15610bbb578284916001809260ff19161781558183947f0000000000000000000000000000000000000000000000000000000000000000915b610ac5578480f35b8454861015610bb75784805260208580610ae28984832001610eb4565b838151910182875af13d15610bb2573d6001600160401b038111610b9f57835190610b16601f8201601f1916850183610e11565b815287833d92013e5b15610b4b57506000198614610b38579483019483610abd565b634e487b7160e01b855260118352602485fd5b8390608492519162461bcd60e51b8352820152602960248201527f50726f706f73616c3a20756e6465726c79696e67207472616e73616374696f6e604482015268081c995d995c9d195960ba1b6064820152fd5b634e487b7160e01b885260418652602488fd5b610b1f565b8480f35b6020606492519162461bcd60e51b8352820152601560248201527450726f706f73616c20646964206e6f74207061737360581b6044820152fd5b6020606492519162461bcd60e51b83528201526019602482015278141c9bdc1bdcd85b08185b1c9958591e48195e1958dd5d1959603a1b6044820152fd5b50503461012f578160031936011261012f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8284346108795780600319360112610879575060ff602092541690519015158152f35b50503461012f578160031936011261012f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461012f578160031936011261012f576020906001549051908152f35b50503461012f578160031936011261012f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b84903461012f578160031936011261012f576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b91908201809211610d8857565b634e487b7160e01b600052601160045260246000fd5b15610da557565b60405162461bcd60e51b815260206004820152601a602482015279125cc81b9bdd081a5b8818da185b1b195b99d9481c195c9a5bd960321b6044820152606490fd5b8115610df1570690565b634e487b7160e01b600052601260045260246000fd5b8115610df1570490565b90601f801991011681019081106001600160401b03821117610e3257604052565b634e487b7160e01b600052604160045260246000fd5b91908203918211610d8857565b15610e5c57565b60405162461bcd60e51b815260206004820152601d60248201527f4973206e6f74206166746572206368616c6c656e676520706572696f640000006044820152606490fd5b81810292918115918404141715610d8857565b90604051906000835490600182811c90808416968715610f7b575b6020948584108914610f675787988489979899529081600014610f455750600114610f06575b505050610f0492500383610e11565b565b600090815285812095935091905b818310610f2d575050610f049350820101388080610ef5565b85548884018501529485019487945091830191610f14565b92505050610f0494925060ff191682840152151560051b820101388080610ef5565b634e487b7160e01b85526022600452602485fd5b91607f1691610ecf565b610fcf7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610d7b565b421115610fe0576001546002541090565b60009056fea2646970667358221220dedcd8912b386c1f5d05d5b9052f0455194860825dac4c661ac6bf72c1ab2b4a64736f6c63430008120033";

type ProposalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProposalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proposal__factory extends ContractFactory {
  constructor(...args: ProposalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _proposalMerkleRootHex: BytesLike,
    _sequencerAddress: AddressLike,
    _nativeCollateral: BigNumberish,
    _tokenCollateral: BigNumberish,
    _challengePeriodSeconds: BigNumberish,
    _payloads: BytesLike[],
    _daoPoolAddress: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _proposalMerkleRootHex,
      _sequencerAddress,
      _nativeCollateral,
      _tokenCollateral,
      _challengePeriodSeconds,
      _payloads,
      _daoPoolAddress,
      overrides || {}
    );
  }
  override deploy(
    _proposalMerkleRootHex: BytesLike,
    _sequencerAddress: AddressLike,
    _nativeCollateral: BigNumberish,
    _tokenCollateral: BigNumberish,
    _challengePeriodSeconds: BigNumberish,
    _payloads: BytesLike[],
    _daoPoolAddress: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _proposalMerkleRootHex,
      _sequencerAddress,
      _nativeCollateral,
      _tokenCollateral,
      _challengePeriodSeconds,
      _payloads,
      _daoPoolAddress,
      overrides || {}
    ) as Promise<
      Proposal & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Proposal__factory {
    return super.connect(runner) as Proposal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProposalInterface {
    return new Interface(_abi) as ProposalInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Proposal {
    return new Contract(address, _abi, runner) as unknown as Proposal;
  }
}
