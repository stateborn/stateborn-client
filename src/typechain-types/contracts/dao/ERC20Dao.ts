/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ERC20DaoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "challengePeriodSeconds"
      | "createProposal"
      | "daoPool"
      | "nativeCollateral"
      | "onERC721Received"
      | "proposals"
      | "sendCrypto"
      | "sendErc20"
      | "sendNft"
      | "tokenCollateral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DaoPoolCreated" | "ProposalCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "challengePeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "daoPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCrypto",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendErc20",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendNft",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCollateral",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "challengePeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendCrypto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendErc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCollateral",
    data: BytesLike
  ): Result;
}

export namespace DaoPoolCreatedEvent {
  export type InputTuple = [daoPoolAddress: AddressLike];
  export type OutputTuple = [daoPoolAddress: string];
  export interface OutputObject {
    daoPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BytesLike,
    proposalAddress: AddressLike
  ];
  export type OutputTuple = [proposalId: string, proposalAddress: string];
  export interface OutputObject {
    proposalId: string;
    proposalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20Dao extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20Dao;
  waitForDeployment(): Promise<this>;

  interface: ERC20DaoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  challengePeriodSeconds: TypedContractMethod<[], [bigint], "view">;

  createProposal: TypedContractMethod<
    [
      _proposalId: BytesLike,
      _proposalMerkleRoot: BytesLike,
      _payloads: BytesLike[]
    ],
    [void],
    "payable"
  >;

  daoPool: TypedContractMethod<[], [string], "view">;

  nativeCollateral: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  proposals: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  sendCrypto: TypedContractMethod<
    [proposalId: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendErc20: TypedContractMethod<
    [
      proposalId: BytesLike,
      tokenAddress: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  sendNft: TypedContractMethod<
    [
      proposalId: BytesLike,
      tokenAddress: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  tokenCollateral: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "challengePeriodSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      _proposalId: BytesLike,
      _proposalMerkleRoot: BytesLike,
      _payloads: BytesLike[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "daoPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nativeCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "sendCrypto"
  ): TypedContractMethod<
    [proposalId: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendErc20"
  ): TypedContractMethod<
    [
      proposalId: BytesLike,
      tokenAddress: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendNft"
  ): TypedContractMethod<
    [
      proposalId: BytesLike,
      tokenAddress: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenCollateral"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DaoPoolCreated"
  ): TypedContractEvent<
    DaoPoolCreatedEvent.InputTuple,
    DaoPoolCreatedEvent.OutputTuple,
    DaoPoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;

  filters: {
    "DaoPoolCreated(address)": TypedContractEvent<
      DaoPoolCreatedEvent.InputTuple,
      DaoPoolCreatedEvent.OutputTuple,
      DaoPoolCreatedEvent.OutputObject
    >;
    DaoPoolCreated: TypedContractEvent<
      DaoPoolCreatedEvent.InputTuple,
      DaoPoolCreatedEvent.OutputTuple,
      DaoPoolCreatedEvent.OutputObject
    >;

    "ProposalCreated(bytes,address)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
  };
}
