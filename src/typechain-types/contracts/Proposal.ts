/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ProposalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "againstVotesCounter"
      | "challengePeriodSeconds"
      | "claimReward"
      | "contractCreationTime"
      | "daoAddress"
      | "daoPool"
      | "executeProposal"
      | "executed"
      | "forVotesCounter"
      | "getPayloads"
      | "isEnded"
      | "isPassed"
      | "nativeCollateral"
      | "proposalMerkleRootHex"
      | "sequencerAddress"
      | "tokenCollateral"
      | "vote"
      | "voteWithToken"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "againstVotesCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractCreationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "daoPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "executed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forVotesCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayloads",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isEnded", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPassed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMerkleRootHex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "voteWithToken",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "votes", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "againstVotesCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractCreationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forVotesCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayloads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEnded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPassed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMerkleRootHex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export interface Proposal extends BaseContract {
  connect(runner?: ContractRunner | null): Proposal;
  waitForDeployment(): Promise<this>;

  interface: ProposalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  againstVotesCounter: TypedContractMethod<[], [bigint], "view">;

  challengePeriodSeconds: TypedContractMethod<[], [bigint], "view">;

  claimReward: TypedContractMethod<[], [void], "payable">;

  contractCreationTime: TypedContractMethod<[], [bigint], "view">;

  daoAddress: TypedContractMethod<[], [string], "view">;

  daoPool: TypedContractMethod<[], [string], "view">;

  executeProposal: TypedContractMethod<[], [void], "payable">;

  executed: TypedContractMethod<[], [boolean], "view">;

  forVotesCounter: TypedContractMethod<[], [bigint], "view">;

  getPayloads: TypedContractMethod<[], [string[]], "view">;

  isEnded: TypedContractMethod<[], [boolean], "view">;

  isPassed: TypedContractMethod<[], [boolean], "view">;

  nativeCollateral: TypedContractMethod<[], [bigint], "view">;

  proposalMerkleRootHex: TypedContractMethod<[], [string], "view">;

  sequencerAddress: TypedContractMethod<[], [string], "view">;

  tokenCollateral: TypedContractMethod<[], [bigint], "view">;

  vote: TypedContractMethod<[voteSide: boolean], [void], "payable">;

  voteWithToken: TypedContractMethod<[voteSide: boolean], [void], "nonpayable">;

  votes: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        nativeForVotes: bigint;
        nativeAgainstVotes: bigint;
        tokenForVotes: bigint;
        tokenAgainstVotes: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "againstVotesCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengePeriodSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "contractCreationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "daoAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "daoPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "executed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "forVotesCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPayloads"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isEnded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPassed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "nativeCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalMerkleRootHex"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sequencerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[voteSide: boolean], [void], "payable">;
  getFunction(
    nameOrSignature: "voteWithToken"
  ): TypedContractMethod<[voteSide: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        nativeForVotes: bigint;
        nativeAgainstVotes: bigint;
        tokenForVotes: bigint;
        tokenAgainstVotes: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
